services:
  dagster_postgres:
    image: postgres:17.4-bookworm
    container_name: edelweiss_postgresql
    environment:
      POSTGRES_USER: 'postgres_user'
      POSTGRES_PASSWORD: 'postgres_password'
      POSTGRES_DB: 'postgres_db'
    networks:
      - edelweiss_network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres_user -d postgres_db']
      interval: 10s
      timeout: 8s
      retries: 5

  edelweiss:
    build:
      context: ..
      dockerfile: ./Dockerfile
    container_name: edelweiss
    image: edelweiss
    restart: always
    environment:
      DAGSTER_POSTGRES_USER: 'postgres_user'
      DAGSTER_POSTGRES_PASSWORD: 'postgres_password'
      DAGSTER_POSTGRES_DB: 'postgres_db'
      DAGSTER_CURRENT_IMAGE: 'edelweiss'
      GBIF_USER: ${GBIF_USER}
      GBIF_PWD: ${GBIF_PWD}
      GBIF_EMAIL: ${GBIF_EMAIL}
    volumes:
      - "./edelweiss:/opt/dagster/edelweiss"
    networks:
      - edelweiss_network

  dagster_webserver:
    build:
      context: .
      dockerfile: Dockerfile_dagster
    entrypoint:
      - dagster-webserver
      - -h
      - '0.0.0.0'
      - -p
      - '3000'
      - -w
      - workspace.yaml
    container_name: dagster-webserver
    expose:
      - '3000'
    ports:
      - '3000:3000'
    environment:
      DAGSTER_POSTGRES_USER: 'postgres_user'
      DAGSTER_POSTGRES_PASSWORD: 'postgres_password'
      DAGSTER_POSTGRES_DB: 'postgres_db'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    networks:
      - edelweiss_network
    depends_on:
      dagster_postgres:
        condition: service_healthy
      edelweiss:
        condition: service_started

  edelweiss_daemon:
    build:
      context: .
      dockerfile: ./Dockerfile_dagster
    entrypoint:
      - dagster-daemon
      - run
    container_name: dagster-daemon
    restart: on-failure
    environment:
      DAGSTER_POSTGRES_USER: 'postgres_user'
      DAGSTER_POSTGRES_PASSWORD: 'postgres_password'
      DAGSTER_POSTGRES_DB: 'postgres_db'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
    networks:
      - edelweiss_network
    depends_on:
      dagster_postgres:
        condition: service_healthy
      edelweiss:
        condition: service_started

networks:
  edelweiss_network:
    driver: bridge
    name: edelweiss_network
